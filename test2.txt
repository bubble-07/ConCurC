def (int fib) (int n)
    if n > 1
        fib(n - 1) + fib(n - 2)
        1

type Dimensioned(Number, Unit)

Dimensioned(A, U) <: A

//As a result, we have arithmetic options on dimensioned values for free

//Still need to define restrictions

def (Dimensioned(A, U) +) (Dimensioned(A, U) a) (Dimensioned(A, U) b)
    Coerce(a + b, Dimensioned(A, U))

def (Dimensioned(A, UnitProduct(U1, U2)) *) (Dimensioned(A, U1) a) (Dimensioned(A, U2) b)
    Coerce(a * b, Dimensioned(A, UnitProduct(U1, U2)))

type Kilometers

Kilometers <: Unit

type Miles

Miles <: Unit

def (Dimensioned(Int, Kilometers) toKilometers) (Dimensioned(Int, Miles) a_)


